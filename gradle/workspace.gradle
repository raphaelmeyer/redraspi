
class WorkspaceTask extends DefaultTask {
  String dockerImage
  String identifier

  private String workspacePath = 'workspaces'

  WorkspaceTask() {
    outputs.upToDateWhen { exists() }
  }

  @TaskAction
  def createWorkspace() {
    create()
  }

  private def create() {
    def id = new ByteArrayOutputStream().withStream { os ->
      def result = project.exec {
        executable = 'docker'
        args = [ 'create', dockerImage ]
        standardOutput = os
      }
      os.toString().trim()
    }

    def path = new File(workspacePath)
    if(!path.exists()) {
      path.mkdirs()
    }
    assert path.isDirectory()

    def file = new File(path, identifier)
    file.write(id)
    file << '\n'
  }

  protected def exists() {
    def file = new File(workspacePath, identifier)
    if(!file.exists()) {
      return false
    }

    def lines = file.readLines()
    if(lines.size() < 1) {
      return false
    }

    def id = lines[0]
    def psResult = new ByteArrayOutputStream().withStream { os ->
      def result = project.exec {
        executable = 'docker'
        args = [ 'ps', '-f', "id=${id}", '-a', '--format', '{{.ID}}' ]
        standardOutput = os
      }
      os.toString().trim()
    }

    if(psResult.isEmpty()) {
      return false
    }
    if(!id.startsWith(psResult)) {
      return false
    }

    return true
  }
}

ext.WorkspaceTask = WorkspaceTask

