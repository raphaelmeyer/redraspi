class WorkspaceTask extends DefaultTask {

  String dockerImage
  def workspace

  private static final String workspacePath = 'workspaces'

  WorkspaceTask() {
    outputs.upToDateWhen { exists() }
  }

  @TaskAction
  def createWorkspace() {
    create()
  }

  private def create() {
    def id = new ByteArrayOutputStream().withStream { os ->
      project.exec {
        executable = 'docker'
        args = [ 'create', dockerImage ]
        standardOutput = os
      }
      os.toString().trim()
    }

    def path = new File(workspacePath)
    if(!path.exists()) {
      path.mkdirs()
    }
    assert path.isDirectory()

    def file = new File(path, workspace.name)
    file.write(id)
    file << '\n'

    workspace.id = id
  }

  protected def exists() {
    def file = new File(workspacePath, workspace.name)
    if(!file.exists()) {
      return false
    }

    def lines = file.readLines()
    if(lines.size() < 1) {
      return false
    }

    def id = lines[0]
    def result = new ByteArrayOutputStream().withStream { os ->
      project.exec {
        executable = 'docker'
        args = [ 'ps', '-f', "id=${id}", '-a', '--format', '{{.ID}}' ]
        standardOutput = os
      }
      os.toString().trim()
    }

    if(result.isEmpty()) {
      return false
    }
    if(!id.startsWith(result)) {
      return false
    }

    workspace.id = id

    return true
  }
}

ext.WorkspaceTask = WorkspaceTask

